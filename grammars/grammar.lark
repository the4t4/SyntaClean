start           : T_NEWLINE* program T_NEWLINE*

program         : module import* declaration+

module          : T_MODULE T_ID T_NEWLINE*
import          : T_IMPORT T_ID T_NEWLINE*
declaration     : entry_decl T_NEWLINE*
                | function_decl T_NEWLINE*
                | instance_decl T_NEWLINE*
                | type_decl T_NEWLINE*

entry_decl      : header? entry footer?
entry           : T_START T_ASSIGN expression

function_decl   : header? function T_NEWLINE* footer?
function        : T_ID param+ T_NEWLINE* case* T_ASSIGN expression

instance_decl   : instance footer?
instance        : T_INSTANCE T_REST

type_decl       : T_DOUBLE_COLON T_ID type+ T_ASSIGN T_REST
                | T_DOUBLE_COLON T_ID T_ALIAS type case*
types           : type (T_COMMA type)*
type            : T_INT
                | T_BOOL
                | T_ID
                | T_CHAR
                | tuple_type
                | list_type
                | array_type
                | T_ID T_RIGHT_ARROW T_ID

header          : T_ID T_DOUBLE_COLON type+ T_RIGHT_ARROW type T_NEWLINE*
footer          : _INDENT? T_WHERE T_NEWLINE* _INDENT? statement+ _DEDENT?

case            : T_BAR expression T_ASSIGN expression T_NEWLINE+

statement       : T_ID T_ASSIGN expression T_NEWLINE+

tuple_type      : T_OPEN types T_CLOSE
tuple           : T_OPEN tuple_vals T_CLOSE
tuple_vals      : expression (T_COMMA expression)+

list_type       : T_SOPEN type T_SCLOSE
list            : T_SOPEN (list_vals (T_DOT_DOT expression?)?)? T_SCLOSE
                | T_SOPEN list_vals T_LIST_COMP list_comp_feed list_comp_guard? T_SCLOSE
list_vals       : expression (T_COMMA expression)* (T_COLON expression)*
list_comp_feed  : list_comp_val T_LEFT_ARROW list_comp_feeder (T_LIST_CONT list_comp_val T_LEFT_ARROW list_comp_feeder)*
list_comp_feeder: T_ID
                | list
list_comp_val   : T_ID 
                | tuple
list_comp_guard : T_BAR expression

array_type      : T_COPEN array_type_vals T_CCLOSE
array_type_vals : array_type_val (T_COMMA array_type_val)*
array_type_val  : T_ID T_DOUBLE_COLON type

array           : T_COPEN array_vals? T_CCLOSE 
array_vals      : array_val (T_COMMA array_val)*
array_val       : T_ID T_ASSIGN expression

param           : expression
                | T_OPEN operator T_CLOSE
                | T_OPEN T_OPEN logic_operator T_CLOSE expression T_CLOSE

function_call   : expression param+
lambda_function : T_OPEN T_LAMBDA param+ T_ASSIGN expression T_CLOSE

expression      : T_ID
                | tuple
                | list
                | array
                | T_STRING
                | T_CHAR_LITERAL
                | T_TRUE
                | T_FALSE
                | T_NUM
                | function_call
                | lambda_function
                | T_OPEN expression T_CLOSE
                | expression operator expression

operator        : T_PLUS
                | T_MINUS
                | T_MUL
                | T_DIV
                | T_POW
                | T_MOD
                | T_REM
                | T_BITOR
                | T_BITAND
                | T_BITXOR
                | T_LIST_CONCAT
                | T_STR_CONCAT 
                | T_INDEX
                | logic_operator

logic_operator  : T_EQ
                | T_NEQ
                | T_AND
                | T_OR
                | T_GT
                | T_LT
                | T_GE
                | T_LE

T_MODULE.2      : "module"
T_IMPORT.2      : "import"
T_START.2       : "Start"
T_WHERE.2       : "where"
T_INSTANCE.2    : "instance"
T_BOOL.2        : "Bool"
T_TRUE.2        : "True"
T_FALSE.2       : "False"
T_INT.2         : "Int"
T_REAL.2        : "Real"
T_STRING.2      : "String"
T_CHAR.2        : "Char"
T_COLON         : ":"
T_DOUBLE_COLON  : "::"
T_ASSIGN        : "="
T_ALIAS         : ":=="
T_RIGHT_ARROW   : "->"
T_LEFT_ARROW    : "<-"
T_OPEN          : "("
T_CLOSE         : ")"
T_SOPEN         : "["
T_SCLOSE        : "]"
T_COPEN         : "{"
T_CCLOSE        : "}"
T_COMMA         : ","
T_UNDERSCORE    : "_"
T_BAR           : "|"
T_EQ            : "=="
T_NEQ           : "<>"
T_GT            : ">"
T_LT            : "<"
T_GE            : ">="
T_LE            : "<="
T_AND           : "&&"
T_OR            : "||"
T_PLUS          : "+"
T_MINUS         : "-"
T_MUL           : "*"
T_DIV           : "/"
T_POW           : "^"
T_MOD.2         : "mod"
T_REM.2         : "rem"
T_BITOR.2       : "bitor"
T_BITAND.2      : "bitand"
T_BITXOR.2      : "bitxor"
T_LIST_CONCAT   : "++"
T_STR_CONCAT    : "+++"
T_DOT_DOT       : ".."
T_LAMBDA        : "\\"
T_LIST_COMP     : "\\\\"
T_LIST_CONT     : "&"
T_NEGATIVE      : "~"
T_EXCLAMATION   : "!"
T_INDEX         : "!!"
T_O.2           : "o"

T_ID            : /[a-zA-Z][a-zA-Z0-9_]*/
T_NUM           : /[0-9]+/
T_CHAR_LITERAL  : /\'.\'/

T_NEWLINE       : /(\r?\n[\t ]*)+/
T_WHITESPACE    : /[ \t]+/
T_LINE_COMMENT  : /\/\/.*\n?/
T_MULTI_COMMENT : /\/\*([^*]|(\*+[^\/]))*\*+\//

%ignore T_WHITESPACE
%ignore T_LINE_COMMENT
%ignore T_MULTI_COMMENT

%declare _INDENT _DEDENT

T_REST          : /.+/

